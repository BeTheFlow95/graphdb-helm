#TODO: The backup should be reworked to work with an array of repositories. The restore must get a
#repository name from the values file, but first we have to rework the restore procedure so the
#backups must be placed in proper folders according to the repository name
{{/*{{- if and (hasKey .Values.graphdb.backupRestore "trigger_restore") .Values.graphdb.backupRestore.enable_restore }}*/}}
{{/*apiVersion: batch/v1beta1*/}}
{{/*kind: CronJob*/}}
{{/*metadata:*/}}
{{/*  name: restore-job*/}}
{{/*spec:*/}}
{{/*  schedule: "* * * * *"*/}}
{{/*  jobTemplate:*/}}
{{/*    spec:*/}}
{{/*      template:*/}}
{{/*        spec:*/}}
{{/*          containers:*/}}
{{/*            - name: run-script-manual-backup*/}}
{{/*              image: {{ .Values.images.graphdb }}*/}}
{{/*              volumeMounts:*/}}
{{/*                - name: graphdb-utils*/}}
{{/*                  mountPath: /tmp/utils*/}}
{{/*                - name: graphdb-backup*/}}
{{/*                  mountPath: {{ $.Values.deployment.storage }}/graphdb-backups/*/}}
{{/*              command: ['bash',*/}}
{{/*                        '-c',*/}}
{{/*                        'cp /tmp/utils/runRestoreBackup.sh /usr/local/bin/; chmod +x /usr/local/bin/runRestoreBackup.sh; /usr/local/bin/runRestoreBackup.sh "{{.Values.graphdb.backupRestore.trigger_restore}}" "{{.Values.graphdb.masters.repository}}" "{{ $.Values.deployment.storage }}/graphdb-backups/backup/{{ .Values.graphdb.backupRestore.restore_from_backup}}" {{ .Values.graphdb.topology | quote }}>> /proc/1/fd/1']*/}}
{{/*          restartPolicy: Never*/}}
{{/*          volumes:*/}}
{{/*            - name: graphdb-utils*/}}
{{/*              configMap:*/}}
{{/*                name: graphdb-utils-configmap*/}}
{{/*            - name: graphdb-backup*/}}
{{/*              persistentVolumeClaim:*/}}
{{/*                claimName: backup-pvc*/}}
{{/*{{- end }}*/}}
