# Loop over the replica count
{{ range $i, $master_index := untilStep 1 (add1 $.Values.graphdb.clusterConfig.mastersCount | int ) 1 }}

{{ $worker_endpoint := printf "http://graphdb-master-%d:7200" $master_index }}

---
apiVersion: {{ $.Values.versions.statefulset }}
kind: StatefulSet
metadata:
  name: graphdb-master-{{ $master_index }}
  labels:
    app: graphdb-master-{{ $master_index }}
spec:
  replicas: 1
  serviceName: graphdb-master-{{ $master_index }}
  # Important to define this strategy instead of the default rolling update, otherwise when
  # performing helm update, GraphDB won't release its lock from the repositories and the new
  # pod won't be able to start.
{{/*  strategy:*/}}
{{/*    type: Recreate*/}}
  selector:
    matchLabels:
      app: graphdb-master-{{ $master_index }}
  template:
    metadata:
      labels:
        app: graphdb-master-{{ $master_index }}
    spec:
      terminationGracePeriodSeconds: 60
      volumes:
        - name: graphdb-master-license
          secret:
            secretName: {{ default $.Values.graphdb.masters.license (include "resolveMasterValue" (dict "nodes" $.Values.graphdb.masters.nodes "value_name" "license" "master_index" $master_index)) }}
        - name: graphdb-master-storage
          persistentVolumeClaim:
            claimName: graphdb-master-{{ $master_index }}-data-pvc
        #TODO: The backup should be reworked to work with an array of repositories. The restore must get a
        #repository name from the values file, but first we have to rework the restore procedure so the
        #backups must be placed in proper folders according to the repository name
{{/*        {{- if eq ($master_index | int64) 1 }}*/}}
{{/*        - name: graphdb-backup*/}}
{{/*          persistentVolumeClaim:*/}}
{{/*            claimName: backup-pvc*/}}
{{/*        {{- end }}*/}}
        - name: graphdb-master-repo-config
          configMap:
            name: {{ required "Config map with .ttl for repositories creation is required!" $.Values.graphdb.masters.repositoryConfigmap }}
      {{ if hasKey $.Values.deployment "imagePullSecret" }}
      imagePullSecrets:
        - name: {{ $.Values.deployment.imagePullSecret }}
      {{ end }}
      nodeSelector:
        {{- default "{}" (default ($.Values.graphdb.masters.nodeSelector | toYaml) (include "resolveMasterValue" (dict "nodes" $.Values.graphdb.masters.nodes "value_name" "nodeSelector" "master_index" $master_index))) | nindent 8  }}
      affinity:
        {{- default "{}" (default ($.Values.graphdb.masters.affinity | toYaml) (include "resolveMasterValue" (dict "nodes" $.Values.graphdb.masters.nodes "value_name" "affinity" "master_index" $master_index))) | nindent 8  }}
      tolerations:
        {{- default "{}" (default ($.Values.graphdb.masters.tolerations | toYaml) (include "resolveMasterValue" (dict "nodes" $.Values.graphdb.masters.nodes "value_name" "tolerations" "master_index" $master_index))) | nindent 8  }}
      topologySpreadConstraints:
        {{- default "{}" (default ($.Values.graphdb.masters.topologySpreadConstraints | toYaml) (include "resolveMasterValue" (dict "nodes" $.Values.graphdb.masters.nodes "value_name" "topologySpreadConstraints" "master_index" $master_index))) | nindent 8  }}
      containers:
        - name: graphdb-master-{{ $master_index }}
          image: {{ $.Values.images.graphdb }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          ports:
            - name: graphdb-m-{{ $master_index }}
              containerPort: 7200
          envFrom:
            - configMapRef:
                name: graphdb-master-{{ $master_index }}-configmap
          volumeMounts:
            - name: graphdb-master-storage
              mountPath: /opt/graphdb/home
          #TODO: The backup should be reworked to work with an array of repositories. The restore must get a
          #repository name from the values file, but first we have to rework the restore procedure so the
          #backups must be placed in proper folders according to the repository name
{{/*            {{- if eq ($master_index | int64) 1 }}*/}}
{{/*            - name: graphdb-backup*/}}
{{/*              mountPath: /opt/graphdb/backups*/}}
{{/*            {{- end }}*/}}
          resources: {{ $.Values.graphdb.masters.resources | toYaml | nindent 12 }}
          # Allow for GraphDB to start within 10*30 seconds before readiness & liveness probes interfere
          # TODO: Check what will happen if some pod dies
          startupProbe:
            httpGet:
              path: /repositories
              port: graphdb-m-{{ $master_index }}
            failureThreshold: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /repositories
              port: graphdb-m-{{ $master_index }}
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /repositories
              port: graphdb-m-{{ $master_index }}
            initialDelaySeconds: 60
            periodSeconds: 10
      initContainers:
        # LICENSE PROVISION
        - name: provision-license
          image: {{ $.Values.images.busybox }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          volumeMounts:
            - name: graphdb-master-storage
              mountPath: /opt/graphdb/home
            - name: graphdb-master-license
              mountPath: /tmp/license/
          command: ['sh', '-c']
          args:
            - |
                mkdir -p /opt/graphdb/home/conf/
                cd /opt/graphdb/home/conf/
                [ -f graphdb.license ] && echo "License present, exiting..." && exit 0

                echo 'Provisioning GraphDB master {{ $master_index }} license'
                cp /tmp/license/*.license ./graphdb.license
                echo 'Done'
        # REPO PROVISION
        - name: provision-repository
          image: {{ $.Values.images.busybox }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          volumeMounts:
            - name: graphdb-master-storage
              mountPath: /opt/graphdb/home
            - name: graphdb-master-repo-config
              mountPath: /tmp/graphdb
          command: ['sh', '-c']
          args:
            - |
              set -eu
              for filename in /tmp/graphdb/*.ttl; do
                repositoryName=$(grep "rep:repositoryID" $filename | sed -ne 's/rep:repositoryID "//p' | sed -ne 's/" ;//p' | sed -ne 's/^[[:space:]]*//p')
                echo "Repo name: $repositoryName"
                echo "File name: $filename"
                mkdir -p /opt/graphdb/home/data/repositories/$repositoryName ;
                cd /opt/graphdb/home/data/repositories/$repositoryName ;

                # If the repo configuration exists -> skip provisioning
                [ -f config.ttl ] && echo "Repository $repositoryName exists, exiting..." && exit 0

                echo "Provisioning GraphDB $repositoryName repository with file $filename" ;
                cp $filename ./config.ttl ;
                echo 'Done'
              done

#TODO: The backup should be reworked to work with an array of repositories. The restore must get a
#repository name from the values file, but first we have to rework the restore procedure so the
#backups must be placed in proper folders according to the repository name
{{/*        {{- if and (eq $.Values.graphdb.topology "standalone") ( $.Values.graphdb.backupRestore.restore_from_backup ) }}*/}}
{{/*        - name: restore-standalone*/}}
{{/*          image: {{ $.Values.images.busybox }}*/}}
{{/*          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}*/}}
{{/*          volumeMounts:*/}}
{{/*            - name: graphdb-master-storage*/}}
{{/*              mountPath: /opt/graphdb/*/}}
{{/*            - name: graphdb-backup*/}}
{{/*              mountPath: {{ $.Values.deployment.storage }}/graphdb-backups/*/}}
{{/*          command: ['sh', '-c']*/}}
{{/*          args:*/}}
{{/*            - |*/}}
{{/*              {{ $repo := $.Values.graphdb.masters.repository -}}*/}}
{{/*              mkdir -p /opt/graphdb/home/data/repositories/{{ $repo }} ;*/}}
{{/*              cd /opt/graphdb/home/data/repositories/ ;*/}}
{{/*              echo "Backup to restore: {{ $.Values.deployment.storage }}/graphdb-backups/backup/{{ $.Values.graphdb.backupRestore.restore_from_backup }}/"*/}}
{{/*              if [ -d {{ $.Values.deployment.storage }}/graphdb-backups/backup/{{ $.Values.graphdb.backupRestore.restore_from_backup }}/ ]; then*/}}
{{/*                rm -rf {{ $repo }}*/}}
{{/*                unzip {{ $.Values.deployment.storage }}/graphdb-backups/backup/{{ $.Values.graphdb.backupRestore.restore_from_backup }}/**/}}
{{/*                echo "Successfully restored!"*/}}
{{/*              else*/}}
{{/*                echo "Nothing to restore."*/}}
{{/*              fi*/}}
{{/*        {{- end }}*/}}

---
apiVersion: {{ $.Values.versions.service }}
kind: Service
metadata:
  name: graphdb-master-{{ $master_index }}
  labels:
    app: graphdb-master-{{ $master_index }}
spec:
  selector:
    app: graphdb-master-{{ $master_index }}
  ports:
    - name: graphdb-master-{{ $master_index }}
      port: 7200
      targetPort: 7200
      protocol: TCP
{{ end }}
